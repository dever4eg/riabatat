service: riabatat
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [UsersTable, Arn]

  stage: dev

plugins:
  - serverless-offline

custom:
  prefix: ${self:service}-${sls:stage}

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    SettingsPageS3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.prefix}-settings-page
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: true
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    SettingsPageBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: !Ref SettingsPageS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join 
               - ''
               - - 'arn:aws:s3:::'
                 - !Ref SettingsPageS3Bucket
                 - /*

functions:
  hello:
    handler: handler.hello
    events:
     - httpApi:
         path: /users/create
         method: get

  telegram-webhook:
    handler: backend/handlers/telegram-webhook.handler
    events:
     - httpApi:
         path: /telegram-webhook
         method: POST
    environment:
      TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}

  settings-update:
    handler: backend/handlers/settings-api.update
    events:
     - httpApi:
         path: /settings
         method: PATCH

  car-finder:
    handler: backend/services//car-finder-service.handler
    events:
     - schedule: rate(24 hours)
    environment:
      RIA_API_KEY: ${env:RIA_API_KEY}
      TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}
